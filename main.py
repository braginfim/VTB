import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import inline_keyboard, reply_keyboard

TOKEN = '2119691890:AAHL_cATaackgF7Z1w_DCag-d-5E3xGvL5E'

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start', 'help'])
@dp.callback_query_handler(text=['quiz1'])
async def send_welcome(message: types.Message):
    text = "–Ø–≤–ª—è–µ—Ç–µ—Å—å –ª–∏ –≤—ã –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º –†–§?"
    buttons = types.InlineKeyboardMarkup(row_width=2)
    button_yes = types.InlineKeyboardButton("–î–∞", callback_data="quiz2")
    button_no = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="quiz1_exit")
    buttons.add(button_yes, button_no)
    await bot.send_message(message["from"]["id"], text, reply_markup=buttons)


@dp.callback_query_handler(text=['quiz2'])
async def quiz2(query: types.CallbackQuery):
    answer = query.data
    text = "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–µ—Ç–∏ –æ—Ç 0-18 –ª–µ—Ç?"
    buttons = types.InlineKeyboardMarkup(row_width=2)
    button_yes = types.InlineKeyboardButton("–î–∞", callback_data="quiz3")
    button_no = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="quiz2_exit")
    buttons.add(button_yes, button_no)
    await bot.send_message(query["from"]["id"], text, reply_markup=buttons)


@dp.callback_query_handler(text=['quiz3'])
async def quiz3(query: types.CallbackQuery):
    answer = query.data
    text = "–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –≤—ã–ø–ª–∞—Ç—ã?"
    buttons = types.InlineKeyboardMarkup(row_width=2)
    button_yes = types.InlineKeyboardButton("–î–∞", callback_data="quiz3_exit")
    button_no = types.InlineKeyboardButton("–ù–µ—Ç", callback_data="quiz4")
    buttons.add(button_yes, button_no)
    await bot.send_message(query["from"]["id"], text, reply_markup=buttons)


@dp.callback_query_handler(text=['quiz4'])
async def quiz4(query: types.CallbackQuery):
    answer = query.data
    text = "–í—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –ø–æ–º–æ—â—å –æ—Ç –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞!\n–î–ª—è —ç—Ç–æ–≥–æ –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —Å—á–µ—Ç –≤ –ë–∞–Ω–∫–µ –í–¢–ë. –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ –±–µ–∑ –≤–∏–∑–∏—Ç–∞ –≤ –±–∞–Ω–∫!\n" + \
        "–Ø –ø—Ä–µ–¥–ª–∞–≥–∞—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∞–Ω–∫–∞ –í–¢–ë. "
    buttons = types.InlineKeyboardMarkup(row_width=2)
    button1 = types.InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å", url="https://www.vtb.ru/app")
    button2 = types.InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å —Å–Ω–æ–≤–∞", callback_data="quiz1")
    buttons.add(button1, button2)
    await bot.send_message(query["from"]["id"], text, reply_markup=buttons)


@dp.callback_query_handler(text=['quiz1_exit'])
async def quiz4(query: types.CallbackQuery):
    answer = query.data
    text = "–ï—Å–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º –†–§, —Ç–æ –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏–º —Å—Ç–∞—Ç—å üòâ  –†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è –æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ—Ü–∏–∞–ª—å–Ω—É—é –ø–æ–º–æ—â—å —Å–≤–æ–∏–º –≥—Ä–∞–∂–¥–∞–Ω–∞–º, –∞ –±–∞–Ω–∫ –í–¢–ë –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –µ—ë –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ. –°–∫–∞—á–∞—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–∞–Ω–∫–∞ –í–¢–ë –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–∫–ø–∫—É \"–°–∫–∞—á–∞—Ç—å\"."
    buttons = types.InlineKeyboardMarkup(row_width=2)
    button = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=answer[:5])
    button1 = types.InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å", url="https://www.vtb.ru/app")
    buttons.add(button1, button)
    await bot.send_message(query["from"]["id"], text, reply_markup=buttons)

@dp.callback_query_handler(text=['quiz2_exit'])
async def quiz4(query: types.CallbackQuery):
    answer = query.data
    text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã–ø–ª–∞—Ç—ã –Ω–∞ –¥–µ—Ç–µ–π –≤—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–µ –º–æ–∂–µ—Ç–µ. –ù–æ —è –ø—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –í–¢–ë –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫–∏–µ –≤—ã–ø–ª–∞—Ç—ã –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≥—Ä–∞–∂–¥–∞–Ω. –¢–∞–º –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å—á–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≤—ã–ø–ª–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.  –°–∫–∞—á–∞—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–∞–Ω–∫–∞ –í–¢–ë —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–∫–ø–∫—É \"–°–∫–∞—á–∞—Ç—å\"."
    buttons = types.InlineKeyboardMarkup(row_width=2)
    button = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=answer[:5])
    button1 = types.InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å", url="https://www.vtb.ru/app")
    buttons.add(button1, button)
    await bot.send_message(query["from"]["id"], text, reply_markup=buttons)

@dp.callback_query_handler(text=['quiz3_exit'])
async def quiz4(query: types.CallbackQuery):
    answer = query.data
    text = "–ï—Å–ª–∏ –≤—ã –ø–æ–ª—É—á–∞–ª–∏ –∏–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ—Å–æ–±–∏—è, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é! –Ø –ø—Ä–µ–¥–ª–∞–≥–∞—é –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –µ–¥–∏–Ω—ã–π —Å–æ—Ü–∏–∞–ª—å–Ω—ã–π —Å—á—ë—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤—Å–µ –≤—ã–ø–ª–∞—Ç—ã. –°–¥–µ–ª–∞—Ç—å —ç—Ç–æ –º–æ–∂–Ω–æ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∞–Ω–∫–∞ –í–¢–ë, –Ω–µ –≤—ã—Ö–æ–¥—è –∏–∑ –¥–æ–º–∞. –°–∫–∞—á–∞—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–∞–Ω–∫–∞ –í–¢–ë –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–∫–ø–∫—É \"–°–∫–∞—á–∞—Ç—å\"."
    buttons = types.InlineKeyboardMarkup(row_width=2)
    button = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=answer[:5])
    button1 = types.InlineKeyboardButton("–°–∫–∞—á–∞—Ç—å", url="https://www.vtb.ru/app")
    buttons.add(button1, button)
    await bot.send_message(query["from"]["id"], text, reply_markup=buttons)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
